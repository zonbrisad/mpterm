#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
#
# escape library test program
#
# File:     etest
# Author:   Peter Malmberg  <peter.malmberg@gmail.com>
# Org:      __ORGANISTATION__
# Date:     2022-07-17
# License:  
# Python:   >= 3.0
#
# ----------------------------------------------------------------------------

# Imports --------------------------------------------------------------------


import argparse
import traceback
import os
import sys
import logging
from PyQt5.QtCore import Qt, QTimer, QSettings, QIODevice
from PyQt5.QtGui import QIcon, QKeyEvent, QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QMenuBar,\
                            QAction, QStatusBar, QDialog, QVBoxLayout,\
                            QHBoxLayout, QTextEdit, QDialogButtonBox,\
                            QPushButton, QMessageBox, QWidget, QLabel,\
                            QFileDialog, QSpacerItem, QSizePolicy

# Variables ------------------------------------------------------------------


app_name = "etest"
app_version = "0.01"
app_license = ""
app_author = "Peter Malmberg  <peter.malmberg@gmail.com>"
app_org = "__ORGANISATION__"
app_description = "escape library test program"

# Qt main window settings
win_title = app_name
#win_icon="myicon.png"
win_x_size = 640
win_y_size = 400

# Code -----------------------------------------------------------------------


about_html=f"""
<center><h2>{app_name}</h2></center>
<br>
<b>Version: </b>{app_version}
<br>
<b>Author: </b>{app_author}
<br>
<hr>
<br>
{app_description}
<br>
"""


class AboutDialog(QDialog):
    def __init__(self, parent = None):
        super(AboutDialog, self).__init__(parent)

        self.setWindowTitle(app_name)
        self.setWindowModality(Qt.ApplicationModal)
        self.resize(400, 300)

        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setSpacing(2)
        self.setLayout(self.verticalLayout)

        # TextEdit
        self.textEdit = QTextEdit(self)
        self.textEdit.setReadOnly(True)
        self.verticalLayout.addWidget(self.textEdit)
        self.textEdit.insertHtml(about_html)

        # Buttonbox
        self.buttonBox = QDialogButtonBox(self)
        self.buttonBox.setStandardButtons( QDialogButtonBox.Ok )
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.setCenterButtons(True)
        self.verticalLayout.addWidget(self.buttonBox)

    @staticmethod
    def about(parent = None):
        dialog = AboutDialog(parent)
        result = dialog.exec_()
        return (result == QDialog.Accepted)


class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.resize(win_y_size, win_y_size)
        self.setWindowTitle(win_title)
        #self.setWindowIcon(QIcon(app_icon))

        # Create central widget
        self.centralwidget = QWidget(self)
        self.setCentralWidget(self.centralwidget)
        self.horizontalLayout = QHBoxLayout(self.centralwidget)
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(2)
        self.horizontalLayout.addLayout(self.verticalLayout)

        self.button1 = QPushButton("Test1", self.centralwidget)
        self.verticalLayout.addWidget(self.button1)
        self.button1.pressed.connect(self.test1)

        self.button2 = QPushButton("Ret begin", self.centralwidget)
        self.verticalLayout.addWidget(self.button2)
        self.button1.pressed.connect(self.butt2)
        
        spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)

        # TextEdit
        self.textEdit = QTextEdit(self.centralwidget)
        self.horizontalLayout.addWidget(self.textEdit)

        # Menubar
        self.menubar = QMenuBar(self)
        self.setMenuBar(self.menubar)

        # Menus
        self.menuFile = QMenu("File", self.menubar)
        self.menubar.addAction(self.menuFile.menuAction())

        self.menuHelp = QMenu("Help", self.menubar)
        self.menubar.addAction(self.menuHelp.menuAction())

        self.actionOpen = QAction("Open", self)
        self.actionOpen.setStatusTip("Open file")
        self.actionOpen.setShortcut("Ctrl+O")
        self.actionOpen.triggered.connect(self.open)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()

        self.actionQuit = QAction("Quit", self)
        self.actionQuit.setStatusTip("Quit application")
        self.actionQuit.setShortcut("Ctrl+Q")
        self.actionQuit.triggered.connect(self.exit)
        self.menuFile.addAction(self.actionQuit)

        self.actionAbout = QAction("About", self)
        self.actionAbout.setStatusTip("About")
        self.actionAbout.triggered.connect(self.about)
        self.menuHelp.addAction(self.actionAbout)

        # Statusbar
        self.statusbar = QStatusBar(self)
        self.statusbar.setLayoutDirection(Qt.LeftToRight)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

    def exit(self):
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setWindowTitle("Quit")
        msgBox.setText("Are you sure you want to quit?")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel )
        if msgBox.exec() == QMessageBox.Ok:
            self.close()

    def open(self):
        files = QFileDialog.getOpenFileNames(self, "Open file", ".", "*.*")

    def about(self):
        AboutDialog.about()

    def test1(self):
        self.textEdit.moveCursor(QTextCursor.StartOfLine)
        self.textEdit.insertHtml("Kalle123")

    def butt2(self):
        self.textEdit.moveCursor(QTextCursor.StartOfLine)
    
    def keyPressEvent(self, a: QKeyEvent):
        logging.debug(f"  {a.key():x}")   
        #logging.debug(f"xxx")   


def main() -> None:
    logging.basicConfig(format="[%(levelname)s] Line: %(lineno)d %(message)s", level=logging.DEBUG)

    parser = argparse.ArgumentParser(
        prog=app_name,
        description=app_description,
        epilog="",
        add_help=True)
    parser.add_argument("--debug", action="store_true", default=False,
                        help="Print debug messages")
    parser.add_argument("--version", action="version",
                        version=f"{app_name} {app_version}",
                        help="Print version information")
    args = parser.parse_args()
    # parser.print_help()
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e:        # sys.exit()
        raise e
    except Exception as e:
        print('ERROR, UNEXPECTED EXCEPTION')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
